package WebPageHandler;

import WebPageHandler.InstaJsonManager.*;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.io.PrintWriter;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.URL;
import java.net.HttpCookie;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.Map;
import java.util.StringJoiner;
import java.util.HashSet;
import java.net.HttpURLConnection;
import java.util.Iterator;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.jsoup.Connection;

import java.io.IOException;
import java.io.FileWriter;
import java.util.concurrent.TimeUnit;
import java.sql.*;
import java.io.File;
import java.util.Arrays;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedWriter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.internal.LinkedTreeMap;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;

public class InstaHandler extends PageHandler{

    private String USER_ID;

    private final String queryId_loadMore = "17875800862117404";
    private final String queryId_following = "17874545323001329";
    private final String queryId_follower = "17851374694183129";

    private final String queryUrl = "https://www.instagram.com/graphql/query/?query_id=";

    private final String loginAjaxUrl = "https://www.instagram.com/accounts/login/ajax/";
    private final String loginRefUrl = "https://www.instagram.com/accounts/login/";
    private final String tagUrl = "https://www.instagram.com/explore/tags/{TAG}/";
    private final String scrollUrl = queryUrl + queryId_loadMore + "&variables={\"tag_name\":\"{TAG}\",\"first\":{FIRST},\"after\":\"{CURSOR}\"}";
    private final String followUrl = "https://www.instagram.com/web/friendships/{USERID}/follow/";
    private final String unfollowUrl = "https://www.instagram.com/web/friendships/{USERID}/unfollow/";
    private final String likeUrl = "https://www.instagram.com/web/likes/{PICID}/like/";
    private final String unlikeUrl = "https://www.instagram.com/web/likes/{PICID}/unlike/";
    private final String followingUrl = queryUrl + queryId_following + "&variables={\"id\":\"{USERID}\",\"first\":{FIRST}}";
    private final String followerUrl = queryUrl +queryId_follower + "&variables={\"id\":\"{USERID}\",\"first\":{FIRST}}";

    /*private boolean _silent;

    private HttpURLConnection conn;
    static final String COOKIES_HEADER = "Set-Cookie";
    private final String USER_AGENT = "Mozilla/5.0";
    static java.net.CookieManager msCookieManager = new java.net.CookieManager();*/

    TagJson picJsn;

    public void initialize(String userUrl){
	try{
	    UserJson userJsn = getJsonFromString(GetPageContent(userUrl), UserJson.class);
	    USER_ID = userJsn.getId();
	    /*Gson gson = new Gson();
	      Type type = new TypeToken<Map<String, String>>(){}.getType();
	      HashMap<String, String> map = gson.fromJson(GetPageContent(userUrl), type);
	      USER_ID = map.get("id");*/
	}catch(Exception e){
	    e.printStackTrace();
	}
    }

    public void printId(){//remove ---
	System.out.println("USER_ID: "+USER_ID);
    }

    public String login(String user, String password) {
	String response;
	try{
	    final String params = "username="+URLEncoder.encode(user, "UTF-8")+"&"+"password="+URLEncoder.encode(password, "UTF-8");
	    GetPageContent(loginRefUrl);
	    response = sendPost(loginAjaxUrl, params, loginRefUrl);
	    return response;
	} catch (Exception e){
	    e.printStackTrace();
	}
	return "";
    }

    public FollowedByJson getFollowedBy(String first){
	try{
	    return getJsonFromString(GetPageContent(followerUrl.replace("{USERID}",USER_ID).replace("{FIRST}",first)), FollowedByJson.class);
	}catch(Exception e){
	    e.printStackTrace();
	}
	return null;
    }

    public FollowJson getFollowing(String first){
	try{
	    return getJsonFromString(GetPageContent(followingUrl.replace("{USERID}",USER_ID).replace("{FIRST}",first)), FollowJson.class);
	}catch(Exception e){
	    e.printStackTrace();
	}
	return null;
    }

    public String followUrl(String userId){ 
	return followUrl.replace("{USERID}", userId); 
    }

    public String unfollowUrl(String userId){ 
	return unfollowUrl.replace("{USERID}", userId);
    }

    public String likeUrl(String picId){ 
	return likeUrl.replace("{PICID}", picId); 
    }

    public String unlikeUrl(String picId){ 
	return unlikeUrl.replace("{PICID}", picId); 
    }

    /*private void printToConsole(String msg){
	if(!_silent) System.out.println(msg);
    }

    public void silent(boolean state){
	_silent = state;
    }*/

    public String getRedirectedURL(HttpURLConnection connection){
	int resp = 0;
	try{
	    resp = connection.getResponseCode();
	} catch(Exception e){
	    e.printStackTrace();
	}
	if (resp != HttpURLConnection.HTTP_OK & ( resp == HttpURLConnection.HTTP_MOVED_TEMP || resp == HttpURLConnection.HTTP_MOVED_PERM ) ) {
	    return connection.getHeaderField("Location");
	}
	return "";
    }

    public String getJsonString(String html){
	//String buf ="";
	String[] bufArray;
	//HashMap<String, String> map = new HashMap<String, String>();
	Document doc = Jsoup.parse(html);
	Elements scriptElements = doc.getElementsByTag("script");
	for(Element scriptElement : scriptElements){
	    //buf+="---newline--->"+scriptElement.html()+"\n";
	    bufArray = scriptElement.html().split("=");
	    //System.out.println(bufArray[0] +"\n"+ bufArray[1]);
	    if (bufArray[0].equals("window._sharedData ")) return bufArray[1].substring(0, bufArray[1].length() - 1);
	}
	//tofile(buf,"getStuff.txt");
	return "";
    }

    public static <T> T getJsonFromString(String jsonString, Class<T> var){
	GsonBuilder builder = new GsonBuilder();
	return builder.create().fromJson(jsonString, var);
    }

    public <T> SimpleJson getSimpleJsonFromString(String jsonString, Class<T> type){

	/*GsonBuilder builder = new GsonBuilder();
	  SimpleJson bufJson;
	  if(type == TagJson.class){
	  return builder.create().fromJson(jsonString, TagJson.class);
	  } else if (type == ScrollJson.class){
	  return builder.create().fromJson(jsonString, ScrollJson.class);
	  } else {
	  System.out.println("getSimpleJsonFromString: Null");
	  return null;
	  }*/
	return (SimpleJson) getJsonFromString(jsonString, type);
    }

    public void getJsonFromString(String jsonString){
	GsonBuilder builder = new GsonBuilder();
	picJsn = builder.create().fromJson(jsonString, TagJson.class);
	ScrollJson buf = builder.create().fromJson(jsonString, ScrollJson.class);
	for(SimpleNode node : picJsn.getSimpleNodes()){
	    System.out.println("id: "+node.getId());
	    System.out.println("Caption:\n"+Arrays.toString(node.getHashtags().toArray())+"\n");
	    System.out.println("Shortcode: "+node.getShortcode());
	}
    }

    public void getJson(String html){
	getJsonFromString(getJsonString(html));
    }

    public void testJson(){
	try{
	    String buf = GetPageContent("https://www.instagram.com/graphql/query/?query_id=17875800862117404&variables={\"tag_name\":\"wood\",\"first\":3,\"after\":\""+picJsn.getCursor()+"\"}");
	    tofile(buf, "query1.json");
	    //getJsonFromString(buf, ScrollJson.class);
	    /*GsonBuilder builder = new GsonBuilder();
	    //Object o = builder.create().fromJson(jsonString, Object.class);
	    ScrollJson bufJsn = builder.create().fromJson(buf, ScrollJson.class);
	    bufJsn.printStatus();
	    //picJsn.checkStuff();
	    System.out.println("===> ScrollJson: ");*/
	    getJsonFromString(buf, ScrollJson.class);
	    for(SimpleNode node : getSimpleJsonFromString(buf, ScrollJson.class).getSimpleNodes()){
		System.out.println("id: "+node.getId());
		System.out.println("Caption:\n"+Arrays.toString(node.getHashtags().toArray())+"\n");
		System.out.println("Shortcode: "+node.getShortcode());
	    }
	} catch (Exception e){
	    e.printStackTrace();
	}
    }

    public class TagSearchHandler{
	private final String tag;
	private String cursor;
	private TagJson.Tag tagJson;
	private ScrollJson scrollJson;
	ArrayList<SimpleNode> nodeList;
	private Iterator<SimpleNode> iter;
	private HashSet<String> hashId = new HashSet<String>();


	TagSearchHandler(String tag){
	    this.tag = tag;
	    initialTagSearch();
	}

	private void initialTagSearch(){
	    try{
		tagJson = (getJsonFromString(GetPageContent(tagUrl.replace("{TAG}", tag)+"?__a=1"), TagJson.OuterTag.class) ).getTag();
	    } catch(Exception e){
		e.printStackTrace();
	    }
	    cursor = tagJson.getCursor();
	    nodeList = tagJson.getSimpleNodes();
	    iter = nodeList.iterator();
	}

	private void updateCursor(){
	    try{
		scrollJson = getJsonFromString(GetPageContent(scrollUrl.replace("{TAG}",tag).replace("{CURSOR}", cursor).replace("{FIRST}","6")), ScrollJson.class);
	    } catch(Exception e){
		e.printStackTrace();
	    }
	    cursor = scrollJson.getCursor();
	}

	public void scrollPics(){
	    System.out.println("in scrollPics");
	    try{
		scrollJson = getJsonFromString(GetPageContent(scrollUrl.replace("{TAG}",tag).replace("{CURSOR}",cursor).replace("{FIRST}","6")), ScrollJson.class);
	    } catch(Exception e){
		e.printStackTrace();
	    }
	    cursor = scrollJson.getCursor();
	    nodeList = scrollJson.getSimpleNodes();
	    iter = nodeList.iterator();
	    System.out.println("out scrollPics");

	}

	public SimpleNode nextNewPic(){
	    System.out.println("nextNewPic");
	    SimpleNode bufNode = nextPic();
	    if(bufNode == null){
		System.out.println("null 1");
		return null;
	    }
	    while(hashId.contains(bufNode.getId())){
		System.out.println("=============> in nextNewPic while");
		bufNode = nextPic();
		if(bufNode == null){
		    System.out.println("null 2");
		    return null;
		}
	    }
	    hashId.add(bufNode.getId());
	    System.out.println("afte add hashId, size = "+hashId.size());
	    return bufNode;

	}

	public SimpleNode nextPic(){
	    System.out.println("nextPic:");
	    SimpleNode bufNode;
	    if(!iter.hasNext()){
		scrollPics();
		if(cursor.equals("")){
		    System.out.println("cursor empty");
		    return null;
		}
	    }
	    while(iter.hasNext()){
		System.out.println("in while");
		bufNode = iter.next();
		System.out.println("after iter.next()");
		if(bufNode != null){
		    System.out.println("return bufNode");
		    return bufNode;
		}
		if(!iter.hasNext()){
		    scrollPics();
		    if(cursor.equals("")){
			System.out.println("if: NULL");
			return null;
		    }
		}
	    }
	    System.out.println("OUT NULL");
	    return null;
	}

    }

}
